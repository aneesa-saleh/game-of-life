class Block extends React.Component{
  constructor(props){
    super(props);
    this.update = this.update.bind(this);
  }
  
  update(){
    this.props.updateBlock(this.props.row,this.props.column);
  }
  
  render(){
    let blockClass = '';
    if(this.props.block.state == true){
      if(this.props.block.old == true)
        blockClass = 'active-old';
      else
        blockClass = 'active-new';
    }
    else{
      if(this.props.block.died > 0)
        blockClass = 'active-died';
    }
    
    return(
      <div className={'block ' + blockClass} onClick={this.update} />
    );
  }
}

class GameContainer extends React.Component{
  constructor(props){
    super(props);
    let blockStates = [];
    for(let i = 0; i < 50; i++){
      let tempArray = [];
      for(let j = 0; j < 50; j++){
        let random = Math.random() * 20;
        if(random < 5)
          tempArray.push({state: true,old: false, died: 0});
        else
          tempArray.push({state: false,old: false, died: 0});
      }
      blockStates.push(tempArray.slice(0));
    }
    
    this.speed = 100;
    
    this.state = {
      running: false,
      blockStates: blockStates,
      generation: 0
    }
    this.blocks = [];
    //grid is 50x50
    for(let i = 0; i < 50; i++){
      for(let j = 0; j < 50; j++){
        this.blocks.push(<Block row={i} column={j} updateBlock={this.updateBlock} block={this.state.blockStates[i][j]}/>);
      }
    }
    this.timer = null;
    this.handleStartStopClick = this.handleStartStopClick.bind(this);
    this.handleResetClick = this.handleResetClick.bind(this);
    this.handleClearClick = this.handleClearClick.bind(this);
    this.updateBlock = this.updateBlock.bind(this);
    this.updateBlocks = this.updateBlocks.bind(this);
    this.runGame = this.runGame.bind(this);
    this.resetTimer = this.resetTimer.bind(this);
    this.setSpeed = this.setSpeed.bind(this); 
  }
  
  setSpeed(speed){
    this.speed = speed;
    clearInterval(this.timer);
    this.timer = setInterval(this.runGame,this.speed);
  }
  
  resetTimer(){
    clearInterval(this.timer);
    this.setState({running: false, generation: 0});
  }
  
  runGame(){
    let isBoardEmpty = true;
    for(let i = 0;i < 50;i++){
      if(this.state.blockStates[i].filter(block => block.state === true).length > 0){
        isBoardEmpty = false;
        break;
      }        
    }
    
    if(isBoardEmpty){
      this.resetTimer();
      return;
    }
    
    let blocksTemp = [];
      for (let i = 0; i < 50; i++)
        blocksTemp.push(this.state.blockStates[i].slice());
      for(let i = 0; i < 50; i++){
        for(let j = 0; j < 50; j++){
          let currentBlock = blocksTemp[i][j];
          let nextState = this.getNextBlockState(i,j);
          if(currentBlock.state == nextState && nextState == true)
            blocksTemp[i][j] = {state: nextState, old: true, died: 0};
          else if(currentBlock.state == true && nextState == false)
            blocksTemp[i][j] = {state: nextState, old: false, died: 2};
          else if(currentBlock.died == 2){
            blocksTemp[i][j] = {state: nextState, old: false, died: 1};
          }
          else
            blocksTemp[i][j] = {state: nextState, old: false, died: 0};
        }
      }
      let generation = this.state.generation;
      generation++;
      this.setState({blockStates: blocksTemp, running: true, generation: generation});
  }
  
  start(){
    let isBoardEmpty = true;
    for(let i = 0;i < 50;i++){
      if(this.state.blockStates[i].filter(block => block.state === true).length > 0){
        isBoardEmpty = false;
        break;
      }        
    }
    
    if(isBoardEmpty){
      return;
    }
    
    this.timer = setInterval(this.runGame, this.speed);
    this.setState({running: true});
  }

  stop(){
    clearInterval(this.timer);
    this.setState({running: false});
  }
  
  handleStartStopClick(){
    if(this.state.running == true)
      this.stop();
    else
      this.start();
  }
  
  handleResetClick(){
    let blockStates = [];
    for(let i = 0; i < 50; i++){
      let tempArray = [];
      for(let j = 0; j < 50; j++){
        let random = Math.random() * 20;
        if(random < 5)
          tempArray.push({state: true, old: false, died: false});
        else
          tempArray.push({state: false, old: false, died: false});
      }
      blockStates.push(tempArray.slice(0));
    }
    clearInterval(this.timer);
    this.setState({blockStates: blockStates,running: false,generation: 0});
   
}
  
  handleClearClick(){
    let blockStates = [];
    for(let i = 0; i < 50; i++){
      let tempArray = [];
      for(let j = 0; j < 50; j++){
        tempArray.push({state: false, old: false, died: false});
      }
      blockStates.push(tempArray.slice(0));
    }
    clearInterval(this.timer);
    this.setState({blockStates: blockStates,running: false,generation: 0});
  }
  //true or false
  getNextBlockState(row,col){
    //max = length of one row-1
    let max = 49;
    let nrows = [], ncols = [], neighborsCount = 0;
    if(row == 0)
      nrows = [max,0,1];
    else if(row == max)
      nrows = [max-1,max,0];
    else
      nrows = [row-1,row,row+1];
    
    if(col == 0)
      ncols = [max,0,1];
    else if(col == max)
      ncols = [max-1,max,0];
    else
      ncols = [col-1,col,col+1];
    
    for(let i = 0; i < 3; i++){
      for(let j = 0; j < 3; j++){
        if(i == 1 && j == 1)
          continue;
        let blockState = this.state.blockStates[nrows[i]][ncols[j]].state;
        if(blockState)
          neighborsCount++;
      }
    }
    
    let currentState = this.state.blockStates[row][col].state;
    if(currentState){
      if(neighborsCount == 2 || neighborsCount == 3)
        return true;
      else
        return false;
    }
    else{
      if(neighborsCount == 3)
        return true;
      else
        return false;
    }
    
  }
  
  updateBlock(row,column){
    let blocksTemp = [];
    for (let i = 0; i < 50; i++)
      blocksTemp.push(this.state.blockStates[i].slice());
    
    blocksTemp[row][column].state = !(blocksTemp[row][column].state);
    let nextState = this.getNextBlockState(row,column);
    this.setState({blockStates : blocksTemp});
  }
  
  updateBlocks(){
    this.blocks = [];
    for(let i = 0; i < 50; i++){
      for(let j = 0; j < 50; j++){
        this.blocks.push(<Block row={i} column={j} block={this.state.blockStates[i][j]} updateBlock={this.updateBlock} />);
      }
    }
  }
  
  componentDidMount(){
    this.timer = setInterval(this.runGame, this.speed);
    this.setState({running: true});
  }
  
  render(){
    this.updateBlocks();
    return <Game handleStartStopClick={this.handleStartStopClick} running={this.state.running} handleResetClick={this.handleResetClick} handleClearClick={this.handleClearClick} blocks={this.blocks} generation={this.state.generation} setSpeed={this.setSpeed}/>;
  }
}

class Game extends React.Component{
  constructor(props){
    super(props);
    this.state = {
      speed: 100
      //100, 400, 800
    }
    
    this.changeSpeed = this.changeSpeed.bind(this);
  }
  
  changeSpeed(speed){
    console.log(speed);
    this.setState({speed: speed});
    this.props.setSpeed(speed);
  }
 render(){
   return(
    <div>
       <div>
        <div className='wrap-buttons'>
        <button className='start-stop-btn' onClick={this.props.handleStartStopClick}>{this.props.running == false ? "Start" : "Pause"}</button>
        <button className='reset-btn' onClick={this.props.handleResetClick}>Reset</button>
        <button className='clear-btn' onClick={this.props.handleClearClick}>Clear</button>
          
          <div className='generation'>Generation: <div className='generation-number'>{this.props.generation}</div></div>
        </div>
       
       </div>
        <div className='game'>
        {this.props.blocks}
        </div>
       
       <div className='wrap-bottom-buttons'>
        <button onClick={() => this.changeSpeed(800)} className={this.state.speed == 800 ? 'active' : ''}>Slow</button>
        <button onClick={() => this.changeSpeed(400)} className={this.state.speed == 400 ? 'active' : ''}>Medium</button>
         <button onClick={() => this.changeSpeed(100)} className={this.state.speed == 100 ? 'active' : ''}>Fast</button>
        </div>
      </div>
   );
 } 
}

ReactDOM.render(<GameContainer />,document.getElementById('root'));